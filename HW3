# HW3
# REMINDER: The work in this assignment must be your own original work and must be completed alone.
# Don't forget to list any authorized forms of collaboration using a Collaboration Statement


class Node:
    def __init__(self, value):
        self.value = value  
        self.next = None 
    
    def __str__(self):
        return "Node({})".format(self.value) 

    __repr__ = __str__
                          

#=============================================== Part I ==============================================

class Stack:
    '''
        >>> x=Stack()
        >>> x.pop()
        >>> x.push(2)
        >>> x.push(4)
        >>> x.push(6)
        >>> x
        Top:Node(6)
        Stack:
        6
        4
        2
        >>> x.pop()
        6
        >>> x
        Top:Node(4)
        Stack:
        4
        2
        >>> len(x)
        2
        >>> x.peek()
        4
    '''
    def __init__(self):
        self.top = None
    
    def __str__(self):
        temp=self.top
        out=[]
        while temp:
            out.append(str(temp.value))
            temp=temp.next
        out='\n'.join(out)
        return ('Top:{}\nStack:\n{}'.format(self.top,out))

    __repr__=__str__


    def isEmpty(self):
        # YOUR CODE STARTS HERE
        if self.top == None:
            return True
        else:
            return False

    def __len__(self): 
        # YOUR CODE STARTS HERE
        if self.isEmpty():
            return 0
        else:
            count = 1
            current = self.top
            while current.next != None:
                count += 1
                current = current.next
            return count

    def push(self,value):
        # YOUR CODE STARTS HERE
        newNode = Node(value)
        newNode.next = self.top
        self.top = newNode

     
    def pop(self):
        # YOUR CODE STARTS HERE
        if not self.isEmpty():
            value = self.top.value
            self.top = self.top.next
            return value

    def peek(self):
        # YOUR CODE STARTS HERE
        if not self.isEmpty():
            return self.top.value


#=============================================== Part II ==============================================

class Calculator:
    def __init__(self):
        self.__expr = None


    @property
    def getExpr(self):
        return self.__expr

    def setExpr(self, new_expr):
        if isinstance(new_expr, str):
            self.__expr=new_expr
        else:
            print('setExpr error: Invalid expression')
            return None

    def _isNumber(self, txt):
        '''
            >>> x=Calculator()
            >>> x._isNumber(' 2.560 ')
            True
            >>> x._isNumber('7 56')
            False
            >>> x._isNumber('2.56p')
            False
        '''
        # YOUR CODE STARTS HERE
        try:
            float(txt)
        except:
            return False
        
        return True





    def _getPostfix(self, txt):
        '''
            Required: _getPostfix must create and use a Stack for expression processing
            >>> x=Calculator()
            >>> x._getPostfix('2 ^ 4')
            '2.0 4.0 ^'
            >>> x._getPostfix('2')
            '2.0'
            >>> x._getPostfix('2.1 * 5 + 3 ^ 2 + 1 + 4.45')
            '2.1 5.0 * 3.0 2.0 ^ + 1.0 + 4.45 +'
            >>> x._getPostfix('2 * 5.34 + 3 ^ 2 + 1 + 4')
            '2.0 5.34 * 3.0 2.0 ^ + 1.0 + 4.0 +'
            >>> x._getPostfix('2.1 * 5 + 3 ^ 2 + 1 + 4')
            '2.1 5.0 * 3.0 2.0 ^ + 1.0 + 4.0 +'
            >>> x._getPostfix('( 2.5 )')
            '2.5'
            >>> x._getPostfix ('( ( 2 ) )')
            '2.0'
            >>> x._getPostfix ('2 * ( ( 5 + -3 ) ^ 2 + ( 1 + 4 ) )')
            '2.0 5.0 -3.0 + 2.0 ^ 1.0 4.0 + + *'
            >>> x._getPostfix ('( 2 * ( ( 5 + 3 ) ^ 2 + ( 1 + 4 ) ) )')
            '2.0 5.0 3.0 + 2.0 ^ 1.0 4.0 + + *'
            >>> x._getPostfix ('( ( 2 * ( ( 5 + 3 ) ^ 2 + ( 1 + 4 ) ) ) )')
            '2.0 5.0 3.0 + 2.0 ^ 1.0 4.0 + + *'
            >>> x._getPostfix('2 * ( -5 + 3 ) ^ 2 + ( 1 + 4 )')
            '2.0 -5.0 3.0 + 2.0 ^ * 1.0 4.0 + +'

            # In invalid expressions, you might print an error message, adjust doctest accordingly
            # If you are veryfing the expression in calculate before passing to postfix, this cases are not necessary

            >>> x._getPostfix('2 * 5 + 3 ^ + -2 + 1 + 4')
            >>> x._getPostfix('2 * 5 + 3 ^ - 2 + 1 + 4')
            >>> x._getPostfix('2    5')
            >>> x._getPostfix('25 +')
            >>> x._getPostfix(' 2 * ( 5 + 3 ) ^ 2 + ( 1 + 4 ')
            >>> x._getPostfix(' 2 * ( 5 + 3 ) ^ 2 + ) 1 + 4 (')
            >>> x._getPostfix('2 * 5% + 3 ^ + -2 + 1 + 4')
        '''

        # YOUR CODE STARTS HERE
        postfixStack = Stack()  # method must use postfixStack to compute the postfix expression

        operators = ["+", "-", "*", "/", "^"]
        pemdas = ["( )", "+ -", "* /", "^"]
        parenthesis = ["(", ")"]
        
        valid = True
        terms = txt.strip().split(" ")
        prev_term = ""

        #first step is to check all the cases that would make it an invalid infix
        #to make it easier to read I broke up the if statements
        for term in terms:
            if terms[-1] in operators or terms[0] in operators: 
                valid = False
                break
            if (not term in operators) and (not self._isNumber(term)) and (not term in parenthesis): 
                valid = False
                break
            elif (prev_term in operators) and (term in operators):
                valid = False
                break

            prev_term = term
        
        #this handles case of incorrect number of parenthesis 
        if valid == True:
            numLeft = 0
            numRight = 0

            for char in txt:
                if char == "(":
                    numLeft += 1
                elif char == ")":
                    numRight += 1
                
                if numRight > numLeft:
                    valid = False 
            if numRight != numLeft:
                valid = False
        
        #this handles the case of incorrect number of operands/operators
        if valid == True:
            numOperands = 0
            numOperators = 0
            for term in terms:
                if term in operators:
                    numOperators += 1
                elif self._isNumber(term):
                    numOperands += 1
            
            if (numOperators + 1) != numOperands:
                valid = False
        
        if valid == True:
            postfix = ""
            for term in terms:
                if term == "(":
                    postfixStack.push(term)
                elif term == ")":
                    while not postfixStack.isEmpty():
                        if postfixStack.peek() != "(":
                            postfix += " "+postfixStack.pop()
                        else:
                            postfixStack.pop()
                            break 
                elif term in operators:
                    if postfixStack.isEmpty():
                        postfixStack.push(term)
                    else:
                        priorityNew = 0
                        for x in range(len(pemdas)):
                            if term in pemdas[x]:
                                priorityNew = x

                        current = postfixStack.top
                        while current != None:
                            for y in range(len(pemdas)):
                                if current.value in pemdas[y]:
                                    priorityOld = y

                            if priorityOld >= priorityNew and term != "^": #priorityOld is in stack
                                postfix += " "+postfixStack.pop()
                                current = postfixStack.top
                                if current == None:
                                    postfixStack.push(term)
                            else:
                                postfixStack.push(term)
                                current = None
                    
                elif self._isNumber(term):
                    postfix += " "+str(float(term))
               
            while not postfixStack.isEmpty():  
                if postfixStack.peek() != "(":
                    postfix += " "+postfixStack.pop()
                else:
                    postfixStack.pop()

            return postfix.strip()
        else:
            return None

    @property
    def calculate(self):
        '''
            calculate must call _getPostfix
            calculate must create and use a Stack to compute the final result as shown in the video lecture
            
            >>> x=Calculator()
            >>> x.setExpr('4 + 3 - 2')
            >>> x.calculate
            5.0
            >>> x.setExpr('-2 + 3.5')
            >>> x.calculate
            1.5
            >>> x.setExpr('4 + 3.65 - 2 / 2')
            >>> x.calculate
            6.65
            >>> x.setExpr('23 / 12 - 223 + 5.25 * 4 * 3423')
            >>> x.calculate
            71661.91666666667
            >>> x.setExpr(' 2 - 3 * 4')
            >>> x.calculate
            -10.0
            >>> x.setExpr('7 ^ 2 ^ 3')
            >>> x.calculate
            5764801.0
            >>> x.setExpr(' 3 * ( ( ( 10 - 2 * 3 ) ) )')
            >>> x.calculate
            12.0
            >>> x.setExpr('8 / 4 * ( 3 - 2.45 * ( 4 - 2 ^ 3 ) ) + 3')
            >>> x.calculate
            28.6
            >>> x.setExpr('2 * ( 4 + 2 * ( 5 - 3 ^ 2 ) + 1 ) + 4')
            >>> x.calculate
            -2.0
            >>> x.setExpr(' 2.5 + 3 * ( 2 + ( 3.0 ) * ( 5 ^ 2 - 2 * 3 ^ ( 2 ) ) * ( 4 ) ) * ( 2 / 8 + 2 * ( 3 - 1 / 3 ) ) - 2 / 3 ^ 2')
            >>> x.calculate
            1442.7777777777778
            

            # In invalid expressions, you might print an error message, but code must return None, adjust doctest accordingly
            >>> x.setExpr(" 4 + + 3 + 2") 
            >>> x.calculate
            >>> x.setExpr("4  3 + 2")
            >>> x.calculate
            >>> x.setExpr('( 2 ) * 10 - 3 * ( 2 - 3 * 2 ) )')
            >>> x.calculate
            >>> x.setExpr('( 2 ) * 10 - 3 * / ( 2 - 3 * 2 )')
            >>> x.calculate
            >>> x.setExpr(' ) 2 ( * 10 - 3 * ( 2 - 3 * 2 ) ')
            >>> x.calculate
            >>> x.setExpr('( 3.5 ) ( 15 )') 
            >>> x.calculate
            >>> x.setExpr('3 ( 5 ) - 15 + 85 ( 12 )') 
            >>> x.calculate
            >>> x.setExpr("( -2 / 6 ) + ( 5 ( ( 9.4 ) ) )") 
            >>> x.calculate
        '''

        if not isinstance(self.__expr,str) or len(self.__expr)<=0:
            print("Argument error in calculate")
            return None

        calcStack = Stack()   # method must use calcStack to compute the  expression

        # YOUR CODE STARTS HERE
        if self._getPostfix(self.getExpr) != None:
            postfix = self._getPostfix(self.getExpr)
            terms = postfix.split(" ")

            for term in terms:
                if self._isNumber(term):
                    calcStack.push(term)
                else:
                    y = float(calcStack.pop())
                    x = float(calcStack.pop())
                    if term == "+":
                        calcStack.push(x + y)
                    elif term == "-":
                        calcStack.push(x - y)
                    elif term == "*":
                        calcStack.push(x * y)
                    elif term == "/":
                        calcStack.push(x / y) 
                    elif term == "^":
                        calcStack.push(x**y)

            return calcStack.peek()
        else:
            return None

#=============================================== Part III ==============================================

class AdvancedCalculator:
    '''
        >>> C = AdvancedCalculator()
        >>> C.states == {}
        True
        >>> C.setExpression('a = 5;b = 7 + a;a = 7;c = a + b;c = a * 0;return c')
        >>> C.calculateExpressions() == {'a = 5': {'a': 5.0}, 'b = 7 + a': {'a': 5.0, 'b': 12.0}, 'a = 7': {'a': 7.0, 'b': 12.0}, 'c = a + b': {'a': 7.0, 'b': 12.0, 'c': 19.0}, 'c = a * 0': {'a': 7.0, 'b': 12.0, 'c': 0.0}, '_return_': 0.0}
        True
        >>> C.states == {'a': 7.0, 'b': 12.0, 'c': 0.0}
        True
        >>> C.setExpression('x1 = 5;x2 = 7 * ( x1 - 1 );x1 = x2 - x1;return x2 + x1 ^ 3')
        >>> C.states == {}
        True
        >>> C.calculateExpressions() == {'x1 = 5': {'x1': 5.0}, 'x2 = 7 * ( x1 - 1 )': {'x1': 5.0, 'x2': 28.0}, 'x1 = x2 - x1': {'x1': 23.0, 'x2': 28.0}, '_return_': 12195.0}
        True
        >>> print(C.calculateExpressions())
        {'x1 = 5': {'x1': 5.0}, 'x2 = 7 * ( x1 - 1 )': {'x1': 5.0, 'x2': 28.0}, 'x1 = x2 - x1': {'x1': 23.0, 'x2': 28.0}, '_return_': 12195.0}
        >>> C.states == {'x1': 23.0, 'x2': 28.0}
        True
        >>> C.setExpression('x1 = 5 * 5 + 97;x2 = 7 * ( x1 / 2 );x1 = x2 * 7 / x1;return x1 * ( x2 - 5 )')
        >>> C.calculateExpressions() == {'x1 = 5 * 5 + 97': {'x1': 122.0}, 'x2 = 7 * ( x1 / 2 )': {'x1': 122.0, 'x2': 427.0}, 'x1 = x2 * 7 / x1': {'x1': 24.5, 'x2': 427.0}, '_return_': 10339.0}
        True
        >>> C.states == {'x1': 24.5, 'x2': 427.0}
        True
        >>> C.setExpression('A = 1;B = A + 9;C = A + B;A = 20;D = A + B + C;return D - A')
        >>> C.calculateExpressions() == {'A = 1': {'A': 1.0}, 'B = A + 9': {'A': 1.0, 'B': 10.0}, 'C = A + B': {'A': 1.0, 'B': 10.0, 'C': 11.0}, 'A = 20': {'A': 20.0, 'B': 10.0, 'C': 11.0}, 'D = A + B + C': {'A': 20.0, 'B': 10.0, 'C': 11.0, 'D': 41.0}, '_return_': 21.0}
        True
        >>> C.states == {'A': 20.0, 'B': 10.0, 'C': 11.0, 'D': 41.0}
        True
        >>> C.setExpression('A = 1;B = A + 9;2C = A + B;A = 20;D = A + B + C;return D + A')
        >>> C.calculateExpressions() is None
        True
        >>> C.states == {}
        True
    '''
    def __init__(self):
        self.expressions = ''
        self.states = {}

    def setExpression(self, expression):
        self.expressions = expression
        self.states = {}

    def _isVariable(self, word):
        '''
            >>> C = AdvancedCalculator()
            >>> C._isVariable('volume')
            True
            >>> C._isVariable('4volume')
            False
            >>> C._isVariable('volume2')
            True
            >>> C._isVariable('vol%2')
            False
        '''
        # YOUR CODE STARTS HERE
        if not word[0].isalpha() or not word.isalnum():
            return False
        return True
       

    def _replaceVariables(self, expr):
        '''
            >>> C = AdvancedCalculator()
            >>> C.states = {'x1': 23.0, 'x2': 28.0}
            >>> C._replaceVariables('1')
            '1'
            >>> C._replaceVariables('105 + x')
            >>> C._replaceVariables('7 * ( x1 - 1 )')
            '7 * ( 23.0 - 1 )'
            >>> C._replaceVariables('x2 - x1')
            '28.0 - 23.0'
        '''
        # YOUR CODE STARTS HERE
        keys = self.states.keys()
        terms = expr.split(" ")
        operators = ["+", "-", "*", "/", "*", "^", "(", ")"]

        for term in terms:
            if self._isVariable(term):
                if term in keys:
                    expr = expr.replace(term, str(self.states.get(term)))
                else:
                    return None
            elif term not in operators: #if its not an operator then it will see if its a number
                try:
                    float(term)
                except:
                    return None
        return expr

    
    def calculateExpressions(self):
        self.states = {} 
        calcObj = Calculator()     # method must use calcObj to compute each expression
        # YOUR CODE STARTS HERE
        
        finalDic = {} 
        tempStates = {}

        if self.expressions == "":
            return None
        else:
            equations = self.expressions.strip().split(';')
            
            for equation in equations:
                
                if "return" in equation:
                    equation = equation.replace("return", "")
                    equation = equation.strip()
                    
                    expr = self._replaceVariables(equation)
                    calcObj.setExpr(expr)
                    answer = calcObj.calculate
                    finalDic['_return_'] = float(answer)
                    return finalDic
 
                equation = equation.strip()
                var = equation.split("=")
                var[0] = var[0].strip()
                
                if not self._isVariable(var[0]):
                    self.states = {}
                    return None
                else:
                    equation = equation.strip()
                    term = equation.split("=")
                    
                    variable = term[0].strip()

                    term[-1] = term[-1].strip()
                    expr = self._replaceVariables(term[-1])

                    calcObj.setExpr(expr)
                    answer = float(calcObj.calculate)

                    self.states[variable] = answer
                    tempStates = self.states.copy()

                    finalDic[equation] = tempStates


